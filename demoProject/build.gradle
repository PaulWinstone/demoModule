/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */
buildscript {
    repositories {
        maven {url "https://jitpack.io"}
    }
    dependencies {
        classpath "com.github.siordache-forks:javafx-gradle-plugin:0.0.9-rc1"
    }
}

plugins {
	id 'application'
	id 'eclipse'
	id 'org.beryx.jlink' version '2.19.0'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()//{ metadataSources { mavenPom(); artifact() } }
	
	flatDir {
		dirs 'lib'
	}
}

apply plugin: "org.openjfx.javafxplugin"

buildDir = 'c:\\demoModuleBuild'

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

plugins.withType(JavaPlugin).configureEach {
	java {
		modularity.inferModulePath = true
	}
}

java {
	modularity.inferModulePath = true
}

javafx {
	version="13"
	modules = ['javafx.controls','javafx.base','javafx.fxml','javafx.graphics','javafx.media','javafx.swing','javafx.web']
}

mainClassName = "demoProject.App"

jlink {

	mergedModule {
        requires "java.xml"
    }
    
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--ignore-signing-information']
    launcher {
        name = 'demoProject'
    }
    
    launcher {
        name = 'demoProjectLauncher'
        //'-Djava.library.path=resources\matrixlock'
        jvmArgs = ['-Dsun.io.serialization.extendedDebugInfo=true', '-showversion', '-XX:+ShowMessageBoxOnError', '-XX:ErrorFile=error.log', '-Xms2g' ,'-Xmx2g', '-Xss512m', '-Duser.language=en']
        args = ['--win9x']
    }
    
}

task demoBuild{
	println "Demo Build"
	println new Date().format( 'yyyyMMdd' )
}

def customers = ['customer01','customer02']

task customerJ {
	customers.each  { cust -> println cust
		task "fatJar$cust" (type: Jar, description:cust, dependsOn: jar){
				println "TaskJar: "+description
	
			ext{
				customer=cust
			}
			println "Its customer: " + customer
			archiveName customer+"_"+version+".jar"
			into ('config') {
				from ("resources/config/$cust/") 
			}
		}
		tasks["fatJar$cust"].dependsOn clean
		tasks["fatJar$cust"].mustRunAfter clean
		demoBuild.dependsOn tasks["fatJar$cust"]
		}
}