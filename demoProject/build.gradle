import org.gradle.testkit.runner.GradleRunner

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath gradleTestKit()
    }
}


plugins {
	id 'application'
	id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.runtime' version '1.9.1'
}

buildDir = 'c:\\demoModuleBuild'

repositories {
    jcenter()
}

dependencies {
    testImplementation 'junit:junit:4.12'
}


java {
    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13
}

javafx {
	version="13"
	modules = ['javafx.controls','javafx.base','javafx.fxml','javafx.graphics','javafx.media','javafx.swing','javafx.web']
}

application {
    mainClass = "demoProject.Launcher"
    applicationName = "${customerId}-${version}"
    version = '06.04.100'
    applicationDefaultJvmArgs = [
    	'-Dsun.io.serialization.extendedDebugInfo=true', 
    	'-showversion', 
    	'-XX:+ShowMessageBoxOnError', 
    	'-XX:ErrorFile=error.log', 
    	'-Xms2g' ,'-Xmx2g', '-Xss512m', 
    	'-Duser.language=en'] 
}

run {
    args '--win9x'
    jvmArgs "-Djava.library.path=$projectDir/dll"
}

test {
    jvmArgs "-Djava.library.path=$projectDir/dll"
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--ignore-signing-information']
    
    jpackage {
    	// remove this line to also create installers:
    	//skipInstaller = false
    	imageOptions = ['--icon', 'images/demo.ico']
    	
    	imageName = "${customerId}-${version}"
		installerName = "${customerId}-${version}"
		outputDir = "jpackage/${customerId}-${version}"
        installerType = 'msi'

        installerOptions = ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
    }
}


tasks.processResources {
	into "$buildDir"
	from ("config/$customerId"){
		into "config"
	}
}

tasks.installDist {
	doLast {
		copy {
			from "dll"
			into "$destinationDir/bin"
		}
	}
}

tasks.startScripts {
    def gen = windowsStartScriptGenerator
    gen.template = resources.text.fromString(gen.template.asString().replace(
    	'DEFAULT_JVM_OPTS=${defaultJvmOpts}', 
    	'DEFAULT_JVM_OPTS="-Djava.library.path=%APP_HOME%\\\\bin" ${defaultJvmOpts}'))
}

tasks.jpackageImage {
	doLast {
		copy {
			from "dll"
			into "$jpackageData.imageOutputDir/$jpackageData.imageName"
		}
	}
}

def customers = ["amazon","google"]
 
task jpackageAll(group: 'distribution', description: 'Creating packages for all customers') {
	doFirst {
		customers.each {
			def customer = it
            GradleRunner.create()
                    .withDebug(true)
                    .withProjectDir(projectDir)
                    .forwardOutput()
                    .withArguments("-is", "-P", "customerId=$customer", "build", "jpackage")
                    .build();
		}
	}
}
